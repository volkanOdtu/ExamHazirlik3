package denemeExam2;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

class Graph{
	int v;
	LinkedList<Integer> adj[];
	
	public Graph(int v) {
		this.v = v;
		this.adj = new LinkedList[v];
		for(int i =0; i< v; i++)
			adj[i]= new LinkedList<Integer>();
	}
	void addEdge(int v ,int w) {
		adj[v].add(w);
	}
	void DepthFirstSearch(int vertexNoStarting) {
		//Tum vertexleri tutucaz ,visited mi degil mi
		boolean[] visitedArr = new boolean[v];
		DFSUtil(vertexNoStarting, visitedArr);
	}
	
	void DFSUtil(int vertexNo ,boolean[] visitedArr) {
		visitedArr[vertexNo] = true;
		System.out.println("vertex no:" + vertexNo);
		 
		Iterator<Integer> iterator = adj[vertexNo].listIterator();
		
		while (iterator.hasNext()) {
			int adjVertexNo = iterator.next();
			if( !visitedArr[adjVertexNo])
				DFSUtil(adjVertexNo, visitedArr); 
		}

			
	}
	public int isIntersecting(boolean[] source ,boolean[] destination) {
		int intersectionNode = -1;
		//if a vertex is visited by both front BFS and back BFS then return that node 
		for(int i =0 ; i< 5 ; i++) {
			if(source[i] && destination[i])
				return i;
		}
		return -1;
	}
	
}
public class GraphNetwork {

	public static void main(String[] args) {
		Graph g = new Graph(4); //Toplamda 4 vertex var
		
		g.addEdge(0, 1);
		g.addEdge(0,2);
		g.addEdge(1, 2);
		g.addEdge(2, 0);
		g.addEdge(2, 3);
		
		System.out.println("Depth First traversel starting from vertex 2");
		g.DepthFirstSearch(2);
	}

}
